import { DriverBorderConstructor, DriverBorderUpdateLimits, DriverCalculateProgress, DriverConstructor, DriverHelperConstructor, DriverHelperUpdateLimits, DriverHooks, DriverRender, DriverUpdateLimits } from './Driver.types';
import { TheSupersonicPlugin } from './TheSupersonicPlugin';
import { Animation } from './Animation';

/**
 * The main purpose of Driver is to calculate current progress from 0 to 1 depending on current scroll and position of 'start' and 'end' elements
 */
export declare class Driver {
    id: string;
    /** Progress is generated by script and means how much of the scroll covered right now. Minimum value: 0, maximum value: 1, float number with 4 numbers after decimal point precision */
    progress: number;
    /** You can store your custom data here to use between hooks */
    data: any;
    /** Start is HTML element. When it appears on the screen, driver will start an animation */
    start: DriverBorder;
    /** End is HTML element. When it appears on the screen, driver will stop an animation */
    end: DriverBorder;
    /** Link to plugin instance to be able to access global variables like 'scroll', 'screenHeight' */
    plugin: TheSupersonicPlugin;
    animations: Map<string, Animation>;
    /** Helper is an element which need for IntersectionObserver to activate or deactive driver */
    helper: DriverHelper;
    hooks: DriverHooks;
    constructor({ id, start, end, plugin, elements, hooks }: DriverConstructor);
    /** Driver calculates its progress and then renders all of it's properties with progress value */
    render({ scroll, renderedInitially, consoleColor }: DriverRender): false | undefined;
    /** Calculates current driver progress, depending on current scroll and top offset of DOM elements */
    calculateProgress({ scroll, start, end }: DriverCalculateProgress): number;
    /** Recalculates DOM elements top offset */
    updateLimits({ scroll, screenHeight }: DriverUpdateLimits): void;
    /** Activates driver when it becomes visible on the screen */
    activate(): void;
    /** Deactivates driver when it's progress becomes 0 or 1' */
    deactivate(): void;
}
/** An HTML Element. It's top offset serves as indicator of where driver starts and where it ends */
declare class DriverBorder {
    /** Associated DOM element */
    domElement: HTMLElement;
    /** Top means amount of scroll needed to border activate or deactivate driver */
    top: number;
    constructor({ domElement, type, driver }: DriverBorderConstructor);
    /** Recalculates top offset */
    updateLimits({ scroll, screenHeight }: DriverBorderUpdateLimits): void;
}
/** A helper HTML element, which connects to Border instances and starts being tracked by IntersectionObserver */
declare class DriverHelper {
    /** DOM element which is dynamically generated by plugin */
    domElement: HTMLElement;
    pluginId: string;
    debug: boolean;
    constructor({ id, pluginId, debug }: DriverHelperConstructor);
    /** Sets position of helper */
    updateLimits({ top, height }: DriverHelperUpdateLimits): void;
    /** Deletes helper DOM element */
    uninit(): void;
}
export {};
